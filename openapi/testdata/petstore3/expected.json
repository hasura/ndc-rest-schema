{
  "settings": {
    "servers": [
      {
        "url": "{{PET_STORE_SERVER_URL:-https://petstore3.swagger.io/api/v3}}"
      },
      {
        "url": "{{PET_STORE_SERVER_URL_2:-https://petstore3.swagger.io/api/v3.1}}"
      }
    ],
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "value": "{{PET_STORE_API_KEY}}",
        "in": "header",
        "name": "api_key"
      },
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account"
            }
          }
        }
      }
    },
    "security": [
      {},
      {
        "petstore_auth": [
          "write:pets",
          "read:pets"
        ]
      }
    ],
    "version": "1.0.19"
  },
  "collections": [],
  "functions": [
    {
      "request": {
        "url": "/pet/findByStatus",
        "method": "get",
        "parameters": [
          {
            "explode": true,
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ]
            }
          }
        ],
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "arguments": {
        "status": {
          "description": "Status values that need to be considered for filter",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PetStatus",
              "type": "named"
            }
          }
        }
      },
      "description": "Finds Pets by status",
      "name": "findPetsByStatus",
      "result_type": {
        "element_type": {
          "name": "Pet",
          "type": "named"
        },
        "type": "array"
      }
    },
    {
      "request": {
        "url": "/pet/findByTags",
        "method": "get",
        "parameters": [
          {
            "explode": true,
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "arguments": {
        "tags": {
          "description": "Tags to filter by",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      },
      "description": "Finds Pets by tags",
      "name": "findPetsByTags",
      "result_type": {
        "element_type": {
          "name": "Pet",
          "type": "named"
        },
        "type": "array"
      }
    },
    {
      "request": {
        "url": "/pet/{petId}",
        "method": "get",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "arguments": {
        "petId": {
          "description": "ID of pet to return",
          "type": {
            "name": "BigInt",
            "type": "named"
          }
        }
      },
      "description": "Find pet by ID",
      "name": "getPetById",
      "result_type": {
        "name": "Pet",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/store/inventory",
        "method": "get",
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "arguments": {},
      "description": "Returns pet inventories by status",
      "name": "getInventory",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/store/order/{orderId}",
        "method": "get",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ]
      },
      "arguments": {
        "orderId": {
          "description": "ID of order that needs to be fetched",
          "type": {
            "name": "BigInt",
            "type": "named"
          }
        }
      },
      "description": "Find purchase order by ID",
      "name": "getOrderById",
      "result_type": {
        "name": "Order",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/user/login",
        "method": "get",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "arguments": {
        "password": {
          "description": "The password for login in clear text",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "username": {
          "description": "The user name for login",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      },
      "description": "Logs user into the system",
      "name": "loginUser",
      "result_type": {
        "name": "String",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/user/{username}",
        "method": "get",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "arguments": {
        "username": {
          "description": "The name that needs to be fetched. Use user1 for testing. ",
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      },
      "description": "Get user by user name",
      "name": "getUserByName",
      "result_type": {
        "name": "User",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/snake",
        "method": "get"
      },
      "arguments": {},
      "description": "Get snake object",
      "name": "getSnake",
      "result_type": {
        "name": "SnakeObject",
        "type": "named"
      }
    }
  ],
  "object_types": {
    "Address": {
      "fields": {
        "city": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "state": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "street": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "zip": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "ApiResponse": {
      "fields": {
        "code": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int",
              "type": "named"
            }
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "Category": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BigInt",
              "type": "named"
            }
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "Customer": {
      "fields": {
        "address": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Address",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BigInt",
              "type": "named"
            }
          }
        },
        "username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "Error": {
      "description": "An error response from the Stripe API",
      "fields": {
        "error": {
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      }
    },
    "FailureDetailsParams": {
      "description": "Details about a failed InboundTransfer.",
      "fields": {
        "code": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TestHelpersCode",
              "type": "named"
            }
          }
        }
      }
    },
    "Order": {
      "fields": {
        "complete": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BigInt",
              "type": "named"
            }
          }
        },
        "petId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BigInt",
              "type": "named"
            }
          }
        },
        "quantity": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int",
              "type": "named"
            }
          }
        },
        "shipDate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DateTime",
              "type": "named"
            }
          }
        },
        "status": {
          "description": "Order Status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrderStatus",
              "type": "named"
            }
          }
        }
      }
    },
    "Pet": {
      "fields": {
        "category": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Category",
              "type": "named"
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BigInt",
              "type": "named"
            }
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "photoUrls": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          }
        },
        "status": {
          "description": "pet status in the store",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PetStatus",
              "type": "named"
            }
          }
        },
        "tags": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Tag",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      }
    },
    "SnakeObject": {
      "fields": {
        "features": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ConnectEmbeddedAccountFeatures",
              "type": "named"
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SnakeObjectId",
              "type": "named"
            }
          }
        }
      }
    },
    "SnakeObjectId": {
      "fields": {
        "complete": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BigInt",
              "type": "named"
            }
          }
        },
        "petId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BigInt",
              "type": "named"
            }
          }
        },
        "quantity": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int",
              "type": "named"
            }
          }
        },
        "shipDate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DateTime",
              "type": "named"
            }
          }
        },
        "status": {
          "description": "Order Status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SnakeObjectIdStatus",
              "type": "named"
            }
          }
        }
      }
    },
    "Tag": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BigInt",
              "type": "named"
            }
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    },
    "TreasuryInboundTransfer": {
      "description": "Use [InboundTransfers](https://stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.",
      "fields": {
        "amount": {
          "description": "Amount (in cents) transferred.",
          "type": {
            "name": "Int",
            "type": "named"
          }
        },
        "cancelable": {
          "description": "Returns `true` if the InboundTransfer is able to be canceled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          }
        },
        "created": {
          "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
          "type": {
            "name": "UnixTime",
            "type": "named"
          }
        },
        "currency": {
          "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "description": {
          "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "String",
                "type": "named"
              }
            }
          }
        },
        "failure_details": {
          "description": "Details about this InboundTransfer's failure. Only set when status is `failed`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          }
        },
        "financial_account": {
          "description": "The FinancialAccount that received the funds.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "hosted_regulatory_receipt_url": {
          "description": "A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "String",
                "type": "named"
              }
            }
          }
        },
        "id": {
          "description": "Unique identifier for the object.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "livemode": {
          "description": "Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.",
          "type": {
            "name": "Boolean",
            "type": "named"
          }
        },
        "metadata": {
          "description": "Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.",
          "type": {
            "name": "JSON",
            "type": "named"
          }
        },
        "object": {
          "description": "String representing the object's type. Objects of the same type share the same value.",
          "type": {
            "name": "TreasuryInboundTransferObject",
            "type": "named"
          }
        },
        "origin_payment_method": {
          "description": "The origin payment method to be debited for an InboundTransfer.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "returned": {
          "description": "Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "Boolean",
                "type": "named"
              }
            }
          }
        },
        "statement_descriptor": {
          "description": "Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`.",
          "type": {
            "name": "String",
            "type": "named"
          }
        },
        "status": {
          "description": "Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been \"confirmed\" and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.",
          "type": {
            "name": "TreasuryInboundTransferStatus",
            "type": "named"
          }
        },
        "status_transitions": {
          "type": {
            "name": "TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions",
            "type": "named"
          }
        },
        "transaction": {
          "description": "The Transaction associated with this object.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          }
        }
      }
    },
    "TreasuryInboundTransfersResourceFailureDetails": {
      "fields": {
        "code": {
          "description": "Reason for the failure.",
          "type": {
            "name": "TreasuryInboundTransfersResourceFailureDetailsCode",
            "type": "named"
          }
        }
      }
    },
    "TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions": {
      "fields": {
        "canceled_at": {
          "description": "Timestamp describing when an InboundTransfer changed status to `canceled`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "UnixTime",
                "type": "named"
              }
            }
          }
        },
        "failed_at": {
          "description": "Timestamp describing when an InboundTransfer changed status to `failed`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "UnixTime",
                "type": "named"
              }
            }
          }
        },
        "succeeded_at": {
          "description": "Timestamp describing when an InboundTransfer changed status to `succeeded`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "UnixTime",
                "type": "named"
              }
            }
          }
        }
      }
    },
    "User": {
      "fields": {
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "firstName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BigInt",
              "type": "named"
            }
          }
        },
        "lastName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "password": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "phone": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "userStatus": {
          "description": "User Status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int",
              "type": "named"
            }
          }
        },
        "username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      }
    }
  },
  "procedures": [
    {
      "request": {
        "url": "/pet",
        "method": "post",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "contentType": "application/json",
          "schema": {
            "type": "Pet"
          }
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of /pet",
          "type": {
            "name": "Pet",
            "type": "named"
          }
        }
      },
      "description": "Add a new pet to the store",
      "name": "addPet",
      "result_type": {
        "name": "Pet",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/pet",
        "method": "put",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "contentType": "application/json",
          "schema": {
            "type": "Pet"
          }
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of /pet",
          "type": {
            "name": "Pet",
            "type": "named"
          }
        }
      },
      "description": "Update an existing pet",
      "name": "updatePet",
      "result_type": {
        "name": "Pet",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/pet/{petId}",
        "method": "post",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "arguments": {
        "name": {
          "description": "Name of pet that needs to be updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "petId": {
          "description": "ID of pet that needs to be updated",
          "type": {
            "name": "BigInt",
            "type": "named"
          }
        },
        "status": {
          "description": "Status of pet that needs to be updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        }
      },
      "description": "Updates a pet in the store with form data",
      "name": "updatePetWithForm",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    {
      "request": {
        "url": "/pet/{petId}",
        "method": "delete",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "arguments": {
        "api_key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "petId": {
          "description": "Pet id to delete",
          "type": {
            "name": "BigInt",
            "type": "named"
          }
        }
      },
      "description": "Deletes a pet",
      "name": "deletePet",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    {
      "request": {
        "url": "/pet/{petId}/uploadImage",
        "method": "post",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "additionalMetadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/octet-stream",
          "schema": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "arguments": {
        "additionalMetadata": {
          "description": "Additional Metadata",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          }
        },
        "body": {
          "description": "Request body of /pet/{petId}/uploadImage",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Base64",
              "type": "named"
            }
          }
        },
        "petId": {
          "description": "ID of pet to update",
          "type": {
            "name": "BigInt",
            "type": "named"
          }
        }
      },
      "description": "uploads an image",
      "name": "uploadFile",
      "result_type": {
        "name": "ApiResponse",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/store/order",
        "method": "post",
        "requestBody": {
          "contentType": "application/json",
          "schema": {
            "type": "Order"
          }
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of /store/order",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Order",
              "type": "named"
            }
          }
        }
      },
      "description": "Place an order for a pet",
      "name": "placeOrder",
      "result_type": {
        "name": "Order",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/store/order/{orderId}",
        "method": "delete",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ]
      },
      "arguments": {
        "orderId": {
          "description": "ID of the order that needs to be deleted",
          "type": {
            "name": "BigInt",
            "type": "named"
          }
        }
      },
      "description": "Delete purchase order by ID",
      "name": "deleteOrder",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    {
      "request": {
        "url": "/user/createWithList",
        "method": "post",
        "requestBody": {
          "contentType": "application/json",
          "schema": {
            "type": "array"
          }
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of /user/createWithList",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "User",
                "type": "named"
              },
              "type": "array"
            }
          }
        }
      },
      "description": "Creates list of users with given input array",
      "name": "createUsersWithListInput",
      "result_type": {
        "name": "User",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/user/{username}",
        "method": "delete",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "arguments": {
        "username": {
          "description": "The name that needs to be deleted",
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      },
      "description": "Delete user",
      "name": "deleteUser",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    {
      "request": {
        "url": "/snake",
        "method": "post"
      },
      "arguments": {},
      "description": "Add snake object",
      "name": "addSnake",
      "result_type": {
        "name": "SnakeObject",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/test_helpers/treasury/inbound_transfers/{id}/fail",
        "method": "post",
        "parameters": [
          {
            "style": "simple",
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "style": "deepObject",
            "explode": true,
            "name": "expand",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 5000
              }
            }
          },
          {
            "style": "deepObject",
            "explode": true,
            "name": "failure_details",
            "in": "query",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "enum": [
                    "account_closed",
                    "account_frozen",
                    "bank_account_restricted",
                    "bank_ownership_changed",
                    "debit_not_authorized",
                    "incorrect_account_holder_address",
                    "incorrect_account_holder_name",
                    "incorrect_account_holder_tax_id",
                    "insufficient_funds",
                    "invalid_account_number",
                    "invalid_currency",
                    "no_account",
                    "other"
                  ]
                }
              }
            }
          }
        ]
      },
      "arguments": {
        "expand": {
          "description": "Specifies which fields in the response should be expanded.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          }
        },
        "failure_details": {
          "description": "Details about a failed InboundTransfer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FailureDetailsParams",
              "type": "named"
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      },
      "name": "PostTestHelpersTreasuryInboundTransfersIdFail",
      "result_type": {
        "name": "TreasuryInboundTransfer",
        "type": "named"
      }
    },
    {
      "request": {
        "url": "/v1/accounts/{account}",
        "method": "delete",
        "parameters": [
          {
            "style": "simple",
            "name": "account",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          }
        ]
      },
      "arguments": {
        "account": {
          "type": {
            "name": "String",
            "type": "named"
          }
        }
      },
      "name": "DeleteAccountsAccount",
      "result_type": {
        "name": "TreasuryInboundTransfer",
        "type": "named"
      }
    }
  ],
  "scalar_types": {
    "Base64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "BigInt": {
      "aggregate_functions": {},
      "comparison_operators": {}
    },
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "ConnectEmbeddedAccountFeatures": {
      "aggregate_functions": {},
      "comparison_operators": {}
    },
    "DateTime": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "Int": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "integer"
      }
    },
    "JSON": {
      "aggregate_functions": {},
      "comparison_operators": {}
    },
    "OrderStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "placed",
          "approved",
          "delivered"
        ],
        "type": "enum"
      }
    },
    "PetStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "available",
          "pending",
          "sold"
        ],
        "type": "enum"
      }
    },
    "SnakeObjectIdStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "placed",
          "approved",
          "delivered"
        ],
        "type": "enum"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "TestHelpersCode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "account_closed",
          "account_frozen",
          "bank_account_restricted",
          "bank_ownership_changed",
          "debit_not_authorized",
          "incorrect_account_holder_address",
          "incorrect_account_holder_name",
          "incorrect_account_holder_tax_id",
          "insufficient_funds",
          "invalid_account_number",
          "invalid_currency",
          "no_account",
          "other"
        ],
        "type": "enum"
      }
    },
    "TreasuryInboundTransferObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "treasury.inbound_transfer"
        ],
        "type": "enum"
      }
    },
    "TreasuryInboundTransferStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "canceled",
          "failed",
          "processing",
          "succeeded"
        ],
        "type": "enum"
      }
    },
    "TreasuryInboundTransfersResourceFailureDetailsCode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "account_closed",
          "account_frozen",
          "bank_account_restricted",
          "bank_ownership_changed",
          "debit_not_authorized",
          "incorrect_account_holder_address",
          "incorrect_account_holder_name",
          "incorrect_account_holder_tax_id",
          "insufficient_funds",
          "invalid_account_number",
          "invalid_currency",
          "no_account",
          "other"
        ],
        "type": "enum"
      }
    },
    "UnixTime": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "integer"
      }
    }
  }
}
